/* Copyright 2020 The FedLearner Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
import "google/protobuf/empty.proto";
import "fedlearner/common/common.proto";
import "fedlearner/common/transmitter_service.proto";

package fedlearner.common;

enum Role {
  Left = 0;
  Right = 1;
}

enum Phase {
  Encrypt = 0;
  Sync = 1;
  L_Diff = 2;
  R_Diff = 3;
  Reload = 4;
}

enum EncryptionKey {
  BaseKey = 0;
  DH = 1;
  ECC = 2;
  RSA = 3;
}

message KeyInfo {
  EncryptionKey type = 1;
  string path = 2;
}

message BytesList {
  repeated bytes value = 1;
}

message DataSyncRequest {
  map<string, BytesList> payload = 1;
}

message DataSyncResponse {
  map<string, BytesList> payload = 1;
}

message TransitionRequest {
  Phase curr_phase = 1;
  Phase next_phase = 2;
}

message TransitionResponse {
  Status status = 1;
  Phase curr_phase = 2;
  Phase next_phase = 3;
}

message GetPhaseResponse {
  Status status = 1;
  Phase phase = 2;
}

message GetKeysResponse {
  Status status = 1;
  KeyInfo key_info = 2;
}

message PSUAllocateTaskRequest {
  Phase phase = 1;
  int64 rank_id = 2;
}

message PSUAllocateTaskResponse {
  Status status = 1;
  repeated FileInfo file_info = 2;
}

message PSUFinishFilesRequest {
  Phase phase = 1;
  repeated int64 file_idx = 2;
}

message PSUFinishFilesResponse {
  Status status = 1;
}

service PSUPhaseManagerService {
  rpc TransitionReady(TransitionRequest) returns (TransitionResponse) {}
  rpc TransitionDone(TransitionRequest) returns (TransitionResponse) {}
}

service PSUTransmitterMasterService {
  rpc GetPhase(google.protobuf.Empty) returns (GetPhaseResponse) {}
  rpc GetKeys(google.protobuf.Empty) returns (GetKeysResponse) {}
  rpc AllocateTask(PSUAllocateTaskRequest) returns (PSUAllocateTaskResponse) {}
  rpc FinishFiles(PSUFinishFilesRequest) returns (PSUFinishFilesResponse) {}
  rpc RecvFinishFiles(PSUFinishFilesRequest) returns (PSUFinishFilesResponse) {}
}

message PSUOptions {
  string output_path = 1;
  string join_key = 2;
}

message EncryptOptions {
  int64 send_row_num = 1;
  int64 send_queue_len = 2;
  int64 recv_queue_len = 3;
  int64 resp_queue_len = 4;
}

message SyncOptions {
  int64 send_row_num = 1;
  int64 send_queue_len = 2;
  int64 recv_queue_len = 3;
  int64 resp_queue_len = 4;
}

message LDiffOptions {
  int64 send_row_num = 1;
  int64 send_queue_len = 2;
  int64 recv_queue_len = 3;
  int64 resp_queue_len = 4;
}

message RDiffOptions {
  int64 send_row_num = 1;
  int64 send_queue_len = 2;
  int64 recv_queue_len = 3;
  int64 resp_queue_len = 4;
}

message ReloadOptions {

}
