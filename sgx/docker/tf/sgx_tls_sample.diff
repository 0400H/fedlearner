diff --git a/tensorflow/core/distributed_runtime/rpc/BUILD b/tensorflow/core/distributed_runtime/rpc/BUILD
index ce1a20a5ae9..9af98d916d3 100644
--- a/tensorflow/core/distributed_runtime/rpc/BUILD
+++ b/tensorflow/core/distributed_runtime/rpc/BUILD
@@ -41,8 +41,8 @@ filegroup(
 
 cc_library(
     name = "grpc_util",
-    srcs = ["grpc_util.cc"],
-    hdrs = ["grpc_util.h"],
+    srcs = ["grpc_util.cc", "grpc_sgx_ra_tls_utils.cc", "grpc_sgx_ra_tls_server.cc", "grpc_sgx_ra_tls_client.cc"],
+    hdrs = ["grpc_util.h", "grpc_sgx_ra_tls.h", "grpc_sgx_ra_tls_utils.h"],
     linkopts = if_windows(["-DEFAULTLIB:ws2_32.lib"]),
     deps = [
         "//tensorflow/core:lib",
diff --git a/tensorflow/core/distributed_runtime/rpc/grpc_channel.cc b/tensorflow/core/distributed_runtime/rpc/grpc_channel.cc
index 985b0454837..89f1da4dc4a 100644
--- a/tensorflow/core/distributed_runtime/rpc/grpc_channel.cc
+++ b/tensorflow/core/distributed_runtime/rpc/grpc_channel.cc
@@ -36,6 +36,8 @@ limitations under the License.
 #include "tensorflow/core/platform/types.h"
 #include "tensorflow/core/util/device_name_utils.h"
 
+#include "tensorflow/core/distributed_runtime/rpc/grpc_sgx_ra_tls.h"
+
 namespace tensorflow {
 
 namespace {
@@ -143,8 +145,10 @@ Status NewHostPortGrpcChannel(const string& target,
   TF_RETURN_IF_ERROR(ValidateHostPortPair(target));
 
   ::grpc::ChannelArguments args = GetChannelArguments(rpc_options);
+  //auto cred = GetChannelCredentials();
+  auto cred = grpc::sgx::TlsCredentials("", "", 0, 0);
   *channel_pointer = ::grpc::CreateCustomChannel(
-      "dns:///" + target, ::grpc::InsecureChannelCredentials(), args);
+          "dns:///" + target, cred, args);
   return Status::OK();
 }
 
diff --git a/tensorflow/core/distributed_runtime/rpc/grpc_rpc_factory.cc b/tensorflow/core/distributed_runtime/rpc/grpc_rpc_factory.cc
index bcb98baaeb9..8f57aa81827 100644
--- a/tensorflow/core/distributed_runtime/rpc/grpc_rpc_factory.cc
+++ b/tensorflow/core/distributed_runtime/rpc/grpc_rpc_factory.cc
@@ -27,6 +27,7 @@ limitations under the License.
 #include "tensorflow/core/util/rpc/rpc_factory.h"
 
 #include "tensorflow/core/distributed_runtime/rpc/grpc_rpc_factory.h"
+#include "tensorflow/core/distributed_runtime/rpc/grpc_sgx_ra_tls.h"
 
 namespace tensorflow {
 
@@ -161,7 +162,8 @@ GrpcRPCFactory::ChannelPtr GrpcRPCFactory::CreateChannelForAddress(
   // (sometimes default) 20s.
   args.SetInt(GRPC_ARG_MAX_RECONNECT_BACKOFF_MS, 1000);
   return ::grpc::CreateCustomChannel(
-      /*target=*/address, ::grpc::InsecureChannelCredentials(), args);
+      ///*target=*/address, GetChannelCredentials(), args);
+      /*target=*/address, grpc::sgx::TlsCredentials("", "", 0, 0), args);
 }
 
 void GrpcRPCFactory::CreateCall(const Tensor& request_t, const bool try_rpc,
diff --git a/tensorflow/core/distributed_runtime/rpc/grpc_server_lib.cc b/tensorflow/core/distributed_runtime/rpc/grpc_server_lib.cc
index fb925e51497..4d4f4a13b01 100644
--- a/tensorflow/core/distributed_runtime/rpc/grpc_server_lib.cc
+++ b/tensorflow/core/distributed_runtime/rpc/grpc_server_lib.cc
@@ -56,6 +56,8 @@ limitations under the License.
 #include "tensorflow/core/public/session_options.h"
 #include "tensorflow/core/util/env_var.h"
 
+#include "tensorflow/core/distributed_runtime/rpc/grpc_sgx_ra_tls.h"
+
 namespace tensorflow {
 
 namespace {
@@ -506,7 +508,8 @@ const string GrpcServer::target() const {
 
 std::shared_ptr<::grpc::ServerCredentials> GrpcServer::GetServerCredentials(
     const ServerDef& server_def) const {
-  return ::grpc::InsecureServerCredentials();
+  //return GetCredentials();
+  return grpc::sgx::TlsServerCredentials();
 }
 
 ChannelCreationFunction GrpcServer::GetChannelCreationFunction() const {
diff --git a/tensorflow/core/distributed_runtime/rpc/grpc_util.cc b/tensorflow/core/distributed_runtime/rpc/grpc_util.cc
index 98e05b64aad..2bc92e1334d 100644
--- a/tensorflow/core/distributed_runtime/rpc/grpc_util.cc
+++ b/tensorflow/core/distributed_runtime/rpc/grpc_util.cc
@@ -13,6 +13,9 @@ See the License for the specific language governing permissions and
 limitations under the License.
 ==============================================================================*/
 
+#include <fstream>
+#include <sstream>
+
 #include "tensorflow/core/distributed_runtime/rpc/grpc_util.h"
 #include "tensorflow/core/distributed_runtime/tensor_coding.h"
 #include "tensorflow/core/lib/random/random.h"
@@ -128,4 +131,59 @@ bool GrpcMaybeParseProto(grpc::ByteBuffer* src, tstring* dst) {
   return true;
 }
 
+std::string get_file_content(const char* filename) {
+    std::ifstream file(filename);
+    std::stringstream buffer;
+    buffer << file.rdbuf();
+    file.close();
+    return buffer.str();
+}
+
+std::shared_ptr<::grpc::ServerCredentials> GetCredentials() {
+    const char* secure = std::getenv("TF_OPTIONAL_TLS_ENABLE");
+    if (secure) {
+        const char* root_cert = std::getenv("TF_OPTIONAL_TLS_ROOT_CERT");
+        const char* perm_private_key = std::getenv("TF_OPTIONAL_TLS_CERT_KEY");
+        const char* perm_cert_chain = std::getenv("TF_OPTIONAL_TLS_CERT");
+        if (!perm_cert_chain || !perm_private_key) {
+            LOG(ERROR) << "Invalid TLS certificate, neither cakey or perm is missing\n";
+            LOG(FATAL);
+
+        }
+        grpc::SslServerCredentialsOptions ssl_opts;
+        grpc::SslServerCredentialsOptions::PemKeyCertPair p = {
+            get_file_content(perm_private_key), get_file_content(perm_cert_chain)
+
+
+        };
+        ssl_opts.pem_key_cert_pairs.push_back(p);
+        ssl_opts.pem_root_certs = get_file_content(root_cert);
+        return ::grpc::SslServerCredentials(ssl_opts);
+
+    }
+    return ::grpc::InsecureServerCredentials();
+
+}
+
+std::shared_ptr<::grpc::ChannelCredentials> GetChannelCredentials() {
+    const char* secure = std::getenv("TF_OPTIONAL_TLS_ENABLE");
+    if (secure) {
+        const char* root_cert = std::getenv("TF_OPTIONAL_TLS_ROOT_CERT");
+        const char* perm_private_key = std::getenv("TF_OPTIONAL_TLS_CERT_KEY");
+        const char* perm_cert_chain = std::getenv("TF_OPTIONAL_TLS_CERT");
+        if (!perm_cert_chain || !perm_private_key) {
+            LOG(ERROR) << "Invalid TLS certificate, neither cakey or perm is missing\n";
+            LOG(FATAL);
+
+        }
+        return ::grpc::SslCredentials(::grpc::SslCredentialsOptions({
+                    get_file_content(root_cert),
+                    get_file_content(perm_private_key),
+                    get_file_content(perm_cert_chain)
+                    }
+                    ));
+
+    }
+    return ::grpc::InsecureChannelCredentials();
+}
 }  // namespace tensorflow
diff --git a/tensorflow/core/distributed_runtime/rpc/grpc_util.h b/tensorflow/core/distributed_runtime/rpc/grpc_util.h
index aed798217cb..aa70e94971a 100644
--- a/tensorflow/core/distributed_runtime/rpc/grpc_util.h
+++ b/tensorflow/core/distributed_runtime/rpc/grpc_util.h
@@ -133,7 +133,9 @@ bool GrpcMaybeParseProto(::grpc::ByteBuffer* src, string* dst);
 
 // Copy grpc buffer src to tstring *dst.
 bool GrpcMaybeParseProto(::grpc::ByteBuffer* src, tstring* dst);
+std::shared_ptr<::grpc::ServerCredentials> GetCredentials();
 
+std::shared_ptr<::grpc::ChannelCredentials> GetChannelCredentials();
 }  // namespace tensorflow
 
 #endif  // TENSORFLOW_CORE_DISTRIBUTED_RUNTIME_RPC_GRPC_UTIL_H_
diff --git a/tensorflow/workspace.bzl b/tensorflow/workspace.bzl
index d6237e10439..b47de49d656 100755
--- a/tensorflow/workspace.bzl
+++ b/tensorflow/workspace.bzl
@@ -650,8 +650,8 @@ def tf_repositories(path_prefix = "", tf_repo_name = ""):
     # WARNING: make sure ncteisen@ and vpai@ are cc-ed on any CL to change the below rule
     tf_http_archive(
         name = "com_github_grpc_grpc",
-        sha256 = "b956598d8cbe168b5ee717b5dafa56563eb5201a947856a6688bbeac9cac4e1f",
-        strip_prefix = "grpc-b54a5b338637f92bfcf4b0bc05e0f57a5fd8fadd",
+        sha256 = "019822cb6f1a339658fc620a54af9b710c39b540ae90e14c3babd6b16fb45b0f",
+        strip_prefix = "grpc-736e3758351ced3cd842bad3ba4e2540f01bbc48",
         system_build_file = clean_dep("//third_party/systemlibs:grpc.BUILD"),
         patch_file = clean_dep("//third_party/grpc:generate_cc_env_fix.patch"),
         system_link_files = {
@@ -664,8 +664,8 @@ def tf_repositories(path_prefix = "", tf_repo_name = ""):
             "//third_party/systemlibs:grpc.bazel.protobuf.bzl": "bazel/protobuf.bzl",
         },
         urls = [
-            "https://storage.googleapis.com/mirror.tensorflow.org/github.com/grpc/grpc/archive/b54a5b338637f92bfcf4b0bc05e0f57a5fd8fadd.tar.gz",
-            "https://github.com/grpc/grpc/archive/b54a5b338637f92bfcf4b0bc05e0f57a5fd8fadd.tar.gz",
+            "https://storage.googleapis.com/mirror.tensorflow.org/github.com/grpc/grpc/archive/736e3758351ced3cd842bad3ba4e2540f01bbc48.tar.gz",
+            "https://github.com/grpc/grpc/archive/736e3758351ced3cd842bad3ba4e2540f01bbc48.tar.gz",
         ],
     )
 
